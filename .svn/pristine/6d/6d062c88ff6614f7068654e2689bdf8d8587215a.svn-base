/**
 * 用户管理文章：
 *
 */
package net.zhaoxuyang.blog.controller;

import java.util.Date;
import javax.servlet.http.HttpSession;
import static net.zhaoxuyang.blog.cache.UserCache.USER_HOME_SIDEBAR;
import net.zhaoxuyang.blog.model.Article;
import net.zhaoxuyang.blog.model.User;
import net.zhaoxuyang.blog.service.ArticleService;
import net.zhaoxuyang.blog.service.UserService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cache.annotation.CacheConfig;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

/**
 *
 * @author zhaoxuyang
 */
//@RequestPermission(value = {Permission.AUTHOR, Permission.ADMINISTRATOR})
@Controller
@CacheConfig(cacheNames = "UserHome")
@RequestMapping("/user/article")
public class UserArticleController {

    @Autowired
    ArticleService articleService;
    @Autowired
    UserService userService;

    /**
     * 新文章发表页面
     *
     * @param model
     * @return
     */
    @GetMapping("/new")
    public String insertForm(
            Model model
    ) {
       String[] categoies = {"BigData","Java", "Linux", "C#", "C++"};
       String[] types = {"程序人生","Python","Java","C","C++","C#","前端","架构","区块链","数据库","游戏开发","移动开发","运维","人工智能","云计算/大数据","研发管理","物联网","计算机基础","其他"};
       Article article = new Article();
       article.setCategory("C#");
       article.setType("Java");
       article.setAuth(1);
       model.addAttribute("categories", categoies);
       model.addAttribute("types", types);
       model.addAttribute("article", article);
        
        
        return "ArticleEdit.html";
    }

    /**
     * 新文章发表事件
     *
     * @param article
     * @param session
     * @return
     */
    @PostMapping("/new")
    @ResponseBody
    public Object insertAction(
            Article article,
            HttpSession session
    ) {
        ///插入文章
        System.out.println("insert");
        
        User user = (User) session.getAttribute("user");
        article.setUserId(user.getId());
        
        boolean isInsert = articleService.insert(article);
        
        return isInsert;
//        
//        boolean result = true;
//        for(int i = 111110 ;i < 1000000; i++){
//            Integer userId = i % 1000;
//            String category = "category" + (i % 200);
//            StringBuilder sb = new StringBuilder();
//            for(int j = 0; j < (i % 6); j++){
//                sb.append("tag").append(j).append("|");
//            }
//            sb.append("tag").append(i % 1000);
//            String tags = sb.toString();
//            String markdown = "md" + i;
//            Integer auth = i % 3;
//            String title = "title" + (i % 5000);
//
//            article.setAuth(auth);
//            article.setCategory(category);
//            article.setTags(tags);
//            article.setUserId(userId);
//            article.setMarkdown(markdown);
//            
//            Date now = new Date();
//            Date date = new Date(now.getTime() + 10000 * (i % 1000));
//            article.setGmtCreate(date);
//            article.setGmtUpdate(date);
//            article.setTitle(title);
//            result &= articleService.insert(article);
//            System.out.println(i);
//        }
//        
        //assertEquals(true, result);
        ///插入文章
        //return String.format("redirect:/%s/article/list/1", user);
    }
    

    @PutMapping("/{articleId}")
    @ResponseBody
    public boolean update(
            @PathVariable String articleId,
            @PathVariable Article article,
            HttpSession session
    ) {
        boolean result = articleService.update(article);
        return result;
    }

    @DeleteMapping("/{articleId}")
    @ResponseBody
    public boolean delete(
            @PathVariable String authorUsername,
            @PathVariable Integer articleId,
            HttpSession session
    ) {
        boolean result = articleService.delete(articleId);
        return result;
    }

}
